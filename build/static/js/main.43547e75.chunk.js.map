{"version":3,"sources":["img/bg.png","components/styles/StyledTetris.js","gameHelpers.js","tetrominos.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js"],"names":["module","exports","StyledTetrisWrapper","styled","div","_templateObject","_taggedTemplateLiteral","bgImage","StyledTetris","_templateObject2","createStage","Array","from","fill","checkCollision","player","stage","_ref","moveX","x","moveY","y","tetromino","length","pos","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","_useState","useState","_useState2","_slicedToArray","setStage","_useState3","_useState4","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","concat","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","React","memo","createElement","console","log","Stage","Cell","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","_usePlayer","setPlayer","rotate","matrix","dir","mtrx","_","index","column","reverse","useCallback","STAGE_WIDTH","_objectSpread","clonedPlayer","JSON","parse","stringify","offset","usePlayer","_usePlayer2","updatePlayerPos","playerRotate","_useStage","_useStage2","_useGameStatus","score","setScore","rows","setRows","_useState5","_useState6","level","setLevel","linePoints","calcScore","useGameStatus","_useGameStatus2","movePlayer","drop","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","move","_ref2","keyCode","role","tabIndex","onKeyDown","e","onKeyUp","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.43547e75.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.563d1e6e.png\";","import styled from 'styled-components';\r\n// BG Image\r\nimport bgImage from '../../img/bg.png';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: url(${bgImage}) #000;\r\n  background-size: cover;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 40px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, 'clear'])\r\n  );\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  // THIS IS SLOWER!!!\r\n  // return player.tetromino.some((row, y) =>\r\n  //   row.some((cell, x) => {\r\n  //     if (cell !== 0) {\r\n  //       return (\r\n  //         !stage[y + player.pos.y + moveY] ||\r\n  //         !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n  //         stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n  //           'clear'\r\n  //       );\r\n  //     }\r\n  //     return false;\r\n  //   })\r\n  // );\r\n\r\n  // Using for loops to be able to return (and break). Not possible with forEach\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      // 1. Check that we're on an actual Tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. Check that our move is inside the game areas height (y)\r\n          // That we're not go through bottom of the play area\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // 3. Check that our move is inside the game areas width (x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // 4. Check that the cell wer'e moving to isn't set to clear\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            'clear'\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // 5. If everything above is false\r\n  return false;\r\n};\r\n","export const TETROMINOS = {\r\n  0: { shape: [[0]], color: '0, 0, 0' },\r\n  I: {\r\n    shape: [['I', 'I', 'I', 'I']],color: '180, 127, 30',\r\n  },\r\n  J: { shape: [['J', 'J', 'J','J']], color: '136, 195, 23' },\r\n  L: {\r\n    shape: [[ 'L', 'L', 'L', 'L']],color: '23, 73, 136',\r\n  },\r\n  O: { shape: [['O', 'O','O', 'O']], color: '200, 130, 136' },\r\n  S: { shape: [['S', 'S' ,'S', 'S']], color: '348, 311, 156' },\r\n  T: {\r\n    shape:  [['T', 'T', 'T', 'T']],color: '332, 161, 278',\r\n  },\r\n  Z: { shape: [['Z', 'Z','Z', 'Z']], color: '27, 80, 148' },\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = 'IJLOSTZ';\r\n  const randTetromino =\r\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n  return TETROMINOS[randTetromino];\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n    const sweepRows = newStage =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n          return ack;\r\n        }\r\n        ack.push(row);\r\n        return ack;\r\n      }, []);\r\n\r\n    const updateStage = prevStage => {\r\n      // First flush the stage\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n      );\r\n\r\n      // Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? 'merged' : 'clear'}`,\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      // Then check if we got some score if collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n      return newStage;\r\n    };\r\n\r\n    // Here are the updates\r\n    setStage(prev => updateStage(prev));\r\n  }, [\r\n    player.collided,\r\n    player.pos.x,\r\n    player.pos.y,\r\n    player.tetromino,\r\n    resetPlayer,\r\n  ]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${props => props.height},\r\n    calc(25vw / ${props => props.width})\r\n  );\r\n  grid-template-columns: repeat(${props => props.width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid #333;\r\n  width: 100%;\r\n  max-width: 25vw;\r\n  background: #111;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  /* border-radius: 5px; */\r\n  background: rgba(${props => props.color}, 0.8);\r\n  border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n  border-bottom-color: rgba(${props => props.color}, 0.1);\r\n  border-right-color: rgba(${props => props.color}, 1);\r\n  border-top-color: rgba(${props => props.color}, 1);\r\n  border-left-color: rgba(${props => props.color}, 0.3);\r\n`;\r\n","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\n// React.memo makes sure we only re-render the changed cells\r\nconst Cell = ({ type }) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color}>\r\n    {console.log('rerender cell')}\r\n  </StyledCell>\r\n);\r\n\r\nexport default React.memo(Cell);\r\n","import React from 'react';\r\nimport { StyledStage } from './styles/StyledStage';\r\n\r\nimport Cell from './Cell';\r\n\r\nconst Stage = ({ stage }) => (\r\n  <StyledStage width={stage[0].length} height={stage.length}>\r\n    {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n  </StyledStage>\r\n);\r\n\r\nexport default Stage;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  border: 4px solid #333;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  color: ${props => (props.gameOver ? 'red' : '#999')};\r\n  background: #000;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 0.8rem;\r\n`;\r\n","import React from 'react';\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n);\r\n\r\nexport default Display;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledStartButton = styled.button`\r\n  box-sizing: border-box;\r\n\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border: none;\r\n  color: white;\r\n  background: #333;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst StartButton = ({ callback }) => (\r\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n);\r\n\r\nexport default StartButton;\r\n","import React, { useState } from 'react';\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\n\r\n// Custom Hooks\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  );\r\n\r\n  console.log('re-render');\r\n\r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      // Activate the interval again when user releases down arrow.\r\n      if (keyCode === 40) {\r\n        setDropTime(1000 / (level + 1));\r\n      }\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    // Reset everything\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setScore(0);\r\n    setLevel(0);\r\n    setRows(0);\r\n    setGameOver(false);\r\n  };\r\n\r\n  const drop = () => {\r\n    // Increase level when player has cleared 10 rows\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel(prev => prev + 1);\r\n      // Also increase speed\r\n      setDropTime(1000 / (level + 1) + 200);\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      // Game over!\r\n      if (player.pos.y < 1) {\r\n        console.log('GAME OVER!!!');\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n    }\r\n  };\r\n\r\n  const dropPlayer = () => {\r\n    // We don't need to run the interval when we use the arrow down to\r\n    // move the tetromino downwards. So deactivate it for now.\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  // This one starts the game\r\n  // Custom hook by Dan Abramov\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n      } else if (keyCode === 38) {\r\n        playerRotate(stage, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={e => move(e)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text=\"Game Over\" />\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n          <StartButton callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n","import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false,\r\n  });\r\n\r\n  function rotate(matrix, dir) {\r\n    // Make the rows to become cols (transpose)\r\n    const mtrx = matrix.map((_, index) => matrix.map(column => column[index]));\r\n    // Reverse each row to get a rotaded matrix\r\n    if (dir > 0) return mtrx.map(row => row.reverse());\r\n    return mtrx.reverse();\r\n  }\r\n\r\n  function playerRotate(stage, dir) {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n    setPlayer(clonedPlayer);\r\n  }\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer(prev => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided,\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false,\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  const linePoints = [40, 100, 300, 1200];\r\n\r\n  const calcScore = useCallback(() => {\r\n    // We have score\r\n    if (rowsCleared > 0) {\r\n      // This is how original Tetris score is calculated\r\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      setRows(prev => prev + rowsCleared);\r\n    }\r\n  }, [level, linePoints, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calcScore();\r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React from 'react';\r\nimport Tetris from './components/Tetris';\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <Tetris />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}